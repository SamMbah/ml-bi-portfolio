import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from wordcloud import WordCloud

# Load Dataset
df = pd.read_csv("malicious_phish.csv")

# Prepare labels (Safe or Malicious)
df['label'] = df['type'].apply(lambda x: "Safe" if x == "benign" else "Malicious")

st.title("üõ°Ô∏è Malware URL Detection")
st.write("Classify URLs as Safe or Malicious using ML model.")

# Tabs
tabs = st.tabs(["Prediction", "EDA", "Model Performance"])

# ---------------- Prediction -----------------
with tabs[0]:
    st.subheader("Make a Prediction")
    
    user_input = st.text_input("Enter a URL:")

    if "model" not in st.session_state:
        # Vectorize URLs
        X = df["url"]
        y = df["label"].map({"Safe": 0, "Malicious": 1})

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        vectorizer = TfidfVectorizer()
        X_train_vec = vectorizer.fit_transform(X_train)
        model = MultinomialNB()
        model.fit(X_train_vec, y_train)

        st.session_state.model = model
        st.session_state.vectorizer = vectorizer

    model = st.session_state.model
    vectorizer = st.session_state.vectorizer

    if st.button("Predict URL"):
        if user_input.strip() == "":
            st.warning("Please enter a URL.")
        else:
            input_vec = vectorizer.transform([user_input])
            prediction = model.predict(input_vec)[0]
            probability = model.predict_proba(input_vec)[0][prediction]

            result = "Safe ‚úÖ" if prediction == 0 else "Malicious üö®"
            st.header(f"Prediction: {result}")
            st.write(f"Confidence: {probability:.2f}")

# ---------------- EDA -----------------
with tabs[1]:
    st.subheader("Exploratory Data Analysis")

    # Distribution of labels
    st.write("### URL Type Distribution")
    label_counts = df['label'].value_counts()

    fig, ax = plt.subplots()
    sns.barplot(x=label_counts.index, y=label_counts.values, ax=ax)
    ax.set_ylabel("Count")
    ax.set_xlabel("URL Type")
    st.pyplot(fig)

    # URL Length Distribution
    st.write("### URL Length Distribution")
    df['url_length'] = df['url'].apply(len)

    fig2, ax2 = plt.subplots()
    sns.histplot(df['url_length'], bins=50, kde=True, ax=ax2)
    ax2.set_xlabel("URL Length")
    ax2.set_ylabel("Frequency")
    st.pyplot(fig2)

    # WordClouds
    st.write("### Word Clouds")

    malicious_text = " ".join(df[df['label'] == "Malicious"]['url'])
    safe_text = " ".join(df[df['label'] == "Safe"]['url'])

    wordcloud_malicious = WordCloud(width=800, height=400, background_color='black').generate(malicious_text)
    wordcloud_safe = WordCloud(width=800, height=400, background_color='white').generate(safe_text)

    st.write("**Malicious URLs WordCloud**")
    fig_mal, ax_mal = plt.subplots(figsize=(10, 5))
    ax_mal.imshow(wordcloud_malicious, interpolation='bilinear')
    ax_mal.axis('off')
    st.pyplot(fig_mal)

    st.write("**Safe URLs WordCloud**")
    fig_safe, ax_safe = plt.subplots(figsize=(10, 5))
    ax_safe.imshow(wordcloud_safe, interpolation='bilinear')
    ax_safe.axis('off')
    st.pyplot(fig_safe)

# ---------------- Model Performance -----------------
with tabs[2]:
    st.subheader("Model Performance")

    X_test_vec = vectorizer.transform(X_test)
    y_pred = model.predict(X_test_vec)

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    st.write("### Accuracy Metrics")
    st.write(f"**Accuracy:** {accuracy:.2f}")
    st.write(f"**Precision:** {precision:.2f}")
    st.write(f"**Recall:** {recall:.2f}")
    st.write(f"**F1 Score:** {f1:.2f}")

    st.write("### Confusion Matrix")
    cm = confusion_matrix(y_test, y_pred)
    fig_cm, ax_cm = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Safe", "Malicious"], yticklabels=["Safe", "Malicious"])
    ax_cm.set_xlabel("Predicted")
    ax_cm.set_ylabel("Actual")
    st.pyplot(fig_cm)
